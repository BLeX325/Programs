#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

bool proverka(int y) // возвращающая функция типа Bool
{
    if( y >= 10 && y < 100) // если переменная типа int больше либо равна 10 и меньше либо равна 100, т.е. если число двузначное
    {
       return true; // возвращаем True
    }
	else return false; // иначе возвращаем False
}

int main ()
{
    setlocale(LC_ALL, "Russian"); // подключаем русский язык в консоли
    vector <int> iVec; // объявляем объект типа "vector" для хранения последовательности целых чисел
    int sum = 0, n, x; // объявляем целочисленные переменные:
    // 1-я для подсчёта суммы всех эл-тов,
    // 2-я для определения изначального кол-ва вводимых в вектор эл-тов
    // 3-я для считывания вводимых с клавиатуры эл-тов и промежуточного хранения в ней для дальнейшего помещения в вектор
    cout << "n = ";
    cin >> n; // считываем переменную n для количества изначально вводимых эл-тов в вектор
    for(int i = 0; i < n; i++) // цикл ввода эл-тов в вектор iVec
    {
        cout << "Введите элемент с номером " << i << endl;
        cin >> x;
        iVec.push_back(x); // добавление эл-та в конец вектора с помощью функции "push_back"
    }
    cout << endl;
    for(vector <int>::iterator it = iVec.begin(); it != iVec.end(); ++it) // цикл подсчёта суммы эл-тов
    // в условии цикла инициализируется и используется итератор "it"
    // изначально итератор указывает на первый эл-т вектора с помощью функции "begin": "iVec.begin()"
    // и перебираются значения пока итератор не дойдёт до конца вектора: "it != iVec.end()"
    // функция "end" указывает на эл-т, стоящий после последнего эл-та вектора
    // и чтобы не поизошло выхода за границы вектора я использовал "it != ... " вместо привычного "it < ..."
    {
        sum = sum + *it; // подсчёт суммы всех эл-тов вектора, *it - возвращает эл-т на номер которого указывает итератор it
    }
    if (proverka(sum) == true) // если функция проверки возвращает true
    {
        cout << "Cумма элементов вектора является двузначным числом: " << sum << endl; // то число двузначное
    }
    else cout << "Сумма элементов вектора не двузначное число: " << sum << endl; // если возвращает false, то число не двузначное
}
